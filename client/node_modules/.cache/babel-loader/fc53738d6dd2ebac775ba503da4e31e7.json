{"ast":null,"code":"import api from \"./api\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  api.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  api.post(\"api/users/login\", userData).then(res => {\n    // save to localstorage\n    const {\n      token\n    } = res.data;\n    // set token to localstorage\n    localStorage.setItem(\"jwtToken\", token);\n    // set token to Auth header\n    setAuthToken(token);\n    // Decode token to get user data\n    const decoded = jwt_decode(token);\n    // set current user\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\n\n// set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// log out user\nexport const logoutUser = history => dispatch => {\n  // remove token from localstorage\n  localStorage.removeItem(\"jwtToken\");\n  // reomve auth header for future requests\n  setAuthToken(false);\n  // set current user to {} and isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  if (history) history.push(\"/\");else window.location.href = \"/\";\n};\n\n// Get current User data\nexport const getCurrentUser = () => dispatch => {\n  api.post(\"api/users/current\").then(res => {\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: res.data\n    });\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};","map":{"version":3,"names":["api","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem","window","location","href","getCurrentUser"],"sources":["/Users/ujjwalsingh/Desktop/projects/Hostel-Management/client/src/actions/authActions.js"],"sourcesContent":["import api from \"./api\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  api\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  api\n    .post(\"api/users/login\", userData)\n    .then(res => {\n      // save to localstorage\n      const { token } = res.data;\n      // set token to localstorage\n      localStorage.setItem(\"jwtToken\", token);\n      // set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// log out user\nexport const logoutUser = history => dispatch => {\n  // remove token from localstorage\n  localStorage.removeItem(\"jwtToken\");\n  // reomve auth header for future requests\n  setAuthToken(false);\n  // set current user to {} and isAuthenticated to false\n  dispatch(setCurrentUser({}));\n  if (history) history.push(\"/\");\n  else window.location.href = \"/\";\n};\n\n// Get current User data\nexport const getCurrentUser = () => dispatch => {\n  api\n    .post(\"api/users/current\")\n    .then(res => {\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: res.data\n      });\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,SAAS;;AAGtD;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAKC,QAAQ,IAAI;EAC7DR,GAAG,CACAS,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,CAAC,CACrCI,IAAI,CAACC,GAAG,IAAIJ,OAAO,CAACK,IAAI,CAAC,QAAQ,CAAC,CAAC,CACnCC,KAAK,CAACC,GAAG,IACRN,QAAQ,CAAC;IACPO,IAAI,EAAEZ,UAAU;IAChBa,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;EACxB,CAAC,CACH,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;EAC/CR,GAAG,CACAS,IAAI,CAAC,iBAAiB,EAAEH,QAAQ,CAAC,CACjCI,IAAI,CAACC,GAAG,IAAI;IACX;IACA,MAAM;MAAES;IAAM,CAAC,GAAGT,GAAG,CAACO,IAAI;IAC1B;IACAG,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAAC;IACvC;IACAnB,YAAY,CAACmB,KAAK,CAAC;IACnB;IACA,MAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAK,CAAC;IACjC;IACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAO,CAAC,CAAC;EACnC,CAAC,CAAC,CACDV,KAAK,CAACC,GAAG,IACRN,QAAQ,CAAC;IACPO,IAAI,EAAEZ,UAAU;IAChBa,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;EACxB,CAAC,CACH,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;EACvC,OAAO;IACLR,IAAI,EAAEX,gBAAgB;IACtBY,OAAO,EAAEO;EACX,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAGlB,OAAO,IAAIC,QAAQ,IAAI;EAC/C;EACAa,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;EACnC;EACAzB,YAAY,CAAC,KAAK,CAAC;EACnB;EACAO,QAAQ,CAACgB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5B,IAAIjB,OAAO,EAAEA,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC,KAC1Be,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;AACjC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAMtB,QAAQ,IAAI;EAC9CR,GAAG,CACAS,IAAI,CAAC,mBAAmB,CAAC,CACzBC,IAAI,CAACC,GAAG,IAAI;IACXH,QAAQ,CAAC;MACPO,IAAI,EAAEX,gBAAgB;MACtBY,OAAO,EAAEL,GAAG,CAACO;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,CACDL,KAAK,CAACC,GAAG,IACRN,QAAQ,CAAC;IACPO,IAAI,EAAEZ,UAAU;IAChBa,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;EACxB,CAAC,CACH,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module"}